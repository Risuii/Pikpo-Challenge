// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Risuii/Server/domain"
	mock "github.com/stretchr/testify/mock"
)

// ActivityRepository is an autogenerated mock type for the ActivityRepository type
type ActivityRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *ActivityRepository) Create(ctx context.Context, data domain.Activity) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Activity) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ActivityRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ActivityRepository) GetAll() ([]domain.Activity, error) {
	ret := _m.Called()

	var r0 []domain.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Activity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Activity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ActivityRepository) GetByID(ctx context.Context, id int64) (domain.Activity, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Activity, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Activity); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Activity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, data
func (_m *ActivityRepository) Update(ctx context.Context, id int64, data domain.Activity) error {
	ret := _m.Called(ctx, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.Activity) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewActivityRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewActivityRepository creates a new instance of ActivityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewActivityRepository(t mockConstructorTestingTNewActivityRepository) *ActivityRepository {
	mock := &ActivityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
