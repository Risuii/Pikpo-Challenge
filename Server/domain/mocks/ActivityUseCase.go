// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Risuii/Server/domain"
	mock "github.com/stretchr/testify/mock"
)

// ActivityUseCase is an autogenerated mock type for the ActivityUseCase type
type ActivityUseCase struct {
	mock.Mock
}

// AddActivity provides a mock function with given fields: ctx, data
func (_m *ActivityUseCase) AddActivity(ctx context.Context, data domain.AddActivityReq) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.AddActivityReq) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteActivity provides a mock function with given fields: ctx, id
func (_m *ActivityUseCase) DeleteActivity(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadAllActivity provides a mock function with given fields:
func (_m *ActivityUseCase) ReadAllActivity() ([]domain.Activity, error) {
	ret := _m.Called()

	var r0 []domain.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Activity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Activity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOneActivity provides a mock function with given fields: ctx, id
func (_m *ActivityUseCase) ReadOneActivity(ctx context.Context, id int64) (domain.Activity, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Activity, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Activity); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Activity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateActivity provides a mock function with given fields: ctx, data
func (_m *ActivityUseCase) UpdateActivity(ctx context.Context, data domain.UpdateActivityReq) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateActivityReq) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewActivityUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewActivityUseCase creates a new instance of ActivityUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewActivityUseCase(t mockConstructorTestingTNewActivityUseCase) *ActivityUseCase {
	mock := &ActivityUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
